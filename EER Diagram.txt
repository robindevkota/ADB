EER Diagram
1.	Employee
o	Attributes: ID (Primary Key), Name (Composite Attribute: fname, mname, lname), gender, DOB, Address, salary
o	Relationships:
	Supervises: An employee supervises other employees (Recursive relationship)
	Works for: An employee works for a department (Many-to-One)
	Works on: An employee works on a project (Many-to-Many)
	Has: An employee has dependents (One-to-Many)
2.	Dependent
o	Attributes: Name (Primary Key), gender, DOB, Relationship
o	Relationships:
	Belongs to: A dependent belongs to an employee (Many-to-One)
3.	Department
o	Attributes: ID (Primary Key), Location, Name
o	Relationships:
	Controls: A department controls projects (One-to-Many)
4.	Project
o	Attributes: ID (Primary Key), Name, Dept_id (Foreign Key)
o	Relationships:
	Managed by: A project is managed by a department (Many-to-One)
	Worked on by: A project is worked on by employees (Many-to-Many)
SQL Schema
sql
Copy code
CREATE TABLE Employee (
    ID INT PRIMARY KEY,
    fname VARCHAR(50),
    mname VARCHAR(50),
    lname VARCHAR(50),
    gender CHAR(1),
    DOB DATE,
    Address VARCHAR(255),
    salary DECIMAL(10, 2),
    SupervisorID INT,
    DepartmentID INT,
    FOREIGN KEY (SupervisorID) REFERENCES Employee(ID),
    FOREIGN KEY (DepartmentID) REFERENCES Department(ID)
);

CREATE TABLE Dependent (
    Name VARCHAR(100),
    gender CHAR(1),
    DOB DATE,
    Relationship VARCHAR(50),
    EmployeeID INT,
    PRIMARY KEY (Name, EmployeeID),
    FOREIGN KEY (EmployeeID) REFERENCES Employee(ID)
);

CREATE TABLE Department (
    ID INT PRIMARY KEY,
    Location VARCHAR(100),
    Name VARCHAR(100)
);

CREATE TABLE Project (
    ID INT PRIMARY KEY,
    Name VARCHAR(100),
    Dept_id INT,
    FOREIGN KEY (Dept_id) REFERENCES Department(ID)
);

CREATE TABLE Employee_Project (
    EmployeeID INT,
    ProjectID INT,
    PRIMARY KEY (EmployeeID, ProjectID),
    FOREIGN KEY (EmployeeID) REFERENCES Employee(ID),
    FOREIGN KEY (ProjectID) REFERENCES Project(ID)
);
Inserting Data
sql
Copy code
-- Inserting into Department
INSERT INTO Department (ID, Location, Name) VALUES (1, 'New York', 'HR');
INSERT INTO Department (ID, Location, Name) VALUES (2, 'Los Angeles', 'IT');
INSERT INTO Department (ID, Location, Name) VALUES (3, 'Chicago', 'Finance');
INSERT INTO Department (ID, Location, Name) VALUES (4, 'Houston', 'Marketing');

-- Inserting into Employee
INSERT INTO Employee (ID, fname, mname, lname, gender, DOB, Address, salary, SupervisorID, DepartmentID) VALUES (1, 'John', 'A', 'Doe', 'M', '1980-01-01', '123 Elm St', 70000, NULL, 1);
INSERT INTO Employee (ID, fname, mname, lname, gender, DOB, Address, salary, SupervisorID, DepartmentID) VALUES (2, 'Jane', 'B', 'Smith', 'F', '1985-02-01', '456 Oak St', 80000, 1, 2);
INSERT INTO Employee (ID, fname, mname, lname, gender, DOB, Address, salary, SupervisorID, DepartmentID) VALUES (3, 'Jim', 'C', 'Brown', 'M', '1990-03-01', '789 Pine St', 60000, 1, 3);
INSERT INTO Employee (ID, fname, mname, lname, gender, DOB, Address, salary, SupervisorID, DepartmentID) VALUES (4, 'Jake', 'D', 'White', 'M', '1982-04-01', '101 Maple St', 65000, 2, 4);
INSERT INTO Employee (ID, fname, mname, lname, gender, DOB, Address, salary, SupervisorID, DepartmentID) VALUES (5, 'Jill', 'E', 'Black', 'F', '1995-05-01', '202 Birch St', 72000, 2, 2);

-- Inserting into Dependent
INSERT INTO Dependent (Name, gender, DOB, Relationship, EmployeeID) VALUES ('Mary', 'F', '2005-06-01', 'Daughter', 1);
INSERT INTO Dependent (Name, gender, DOB, Relationship, EmployeeID) VALUES ('Tom', 'M', '2010-07-01', 'Son', 2);
INSERT INTO Dependent (Name, gender, DOB, Relationship, EmployeeID) VALUES ('Anna', 'F', '2015-08-01', 'Daughter', 3);
INSERT INTO Dependent (Name, gender, DOB, Relationship, EmployeeID) VALUES ('Sam', 'M', '2008-09-01', 'Son', 4);
INSERT INTO Dependent (Name, gender, DOB, Relationship, EmployeeID) VALUES ('Ella', 'F', '2012-10-01', 'Daughter', 5);

-- Inserting into Project
INSERT INTO Project (ID, Name, Dept_id) VALUES (1, 'Project A', 1);
INSERT INTO Project (ID, Name, Dept_id) VALUES (2, 'Project B', 2);
INSERT INTO Project (ID, Name, Dept_id) VALUES (3, 'Project C', 3);
INSERT INTO Project (ID, Name, Dept_id) VALUES (4, 'Project D', 4);
INSERT INTO Project (ID, Name, Dept_id) VALUES (5, 'Project E', 2);

-- Inserting into Employee_Project
INSERT INTO Employee_Project (EmployeeID, ProjectID) VALUES (1, 1);
INSERT INTO Employee_Project (EmployeeID, ProjectID) VALUES (2, 2);
INSERT INTO Employee_Project (EmployeeID, ProjectID) VALUES (3, 3);
INSERT INTO Employee_Project (EmployeeID, ProjectID) VALUES (4, 4);
INSERT INTO Employee_Project (EmployeeID, ProjectID) VALUES (5, 5);
Query to Find the Highest Salary Employee, Project, and Department
sql
Copy code
SELECT e.ID, e.fname, e.lname, e.salary, p.Name AS ProjectName, d.Name AS DepartmentName
FROM Employee e
JOIN Employee_Project ep ON e.ID = ep.EmployeeID
JOIN Project p ON ep.ProjectID = p.ID
JOIN Department d ON p.Dept_id = d.ID
WHERE e.salary = (
    SELECT MAX(salary)
    FROM Employee
);
Table Creation and Trigger
sql
Copy code
CREATE TABLE Employee_Work (
    name VARCHAR(50),
    occupation VARCHAR(50),
    working_date DATE,
    working_hour INT
);

-- Insert 5 records
INSERT INTO Employee_Work (name, occupation, working_date, working_hour) VALUES ('John Doe', 'Developer', '2023-01-01', 8);
INSERT INTO Employee_Work (name, occupation, working_date, working_hour) VALUES ('Jane Smith', 'Analyst', '2023-02-01', 7);
INSERT INTO Employee_Work (name, occupation, working_date, working_hour) VALUES ('Jim Brown', 'Manager', '2023-03-01', 9);
INSERT INTO Employee_Work (name, occupation, working_date, working_hour) VALUES ('Jake White', 'Consultant', '2023-04-01', 6);
INSERT INTO Employee_Work (name, occupation, working_date, working_hour) VALUES ('Jill Black', 'Designer', '2023-05-01', 5);

-- Creating the trigger
CREATE TRIGGER before_employee_insert
BEFORE INSERT ON Employee_Work
FOR EACH ROW
BEGIN
    IF NEW.working_hour < 0 THEN
        SET NEW.working_hour = 0;
    END IF;
END;

